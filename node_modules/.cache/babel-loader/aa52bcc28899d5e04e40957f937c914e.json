{"ast":null,"code":"import _slicedToArray from \"/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { PacmanLoader } from 'react-spinners';\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        weather = _useState2[0],\n        setWeather = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      getData(position.coords.latitude, position.coords.longitude);\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(getLocation, 5000);\n  }, []);\n\n  const getData = async (latitude, longitude) => {\n    const API_KEY = \"1f38c79d918a202fc06dbd3406c2ba09\";\n    const response = await fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(latitude, \"&lon=\").concat(longitude, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n    const data = await response.json();\n    console.log(data);\n    setWeather(data);\n    setLoading(false);\n  }; // getLocation()\n\n\n  console.log(weather);\n  return isLoading ? React.createElement(PacmanLoader // css={override}\n  , {\n    sizeUnit: \"px\",\n    size: 150,\n    color: '#123abc',\n    loading: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"container-fluid text-white my-auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container mx-auto my-4 py-4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row justify-content-center text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"col-12 display-4 my-2 py-3 text-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Awesome Weather App\"), React.createElement(\"h2\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, weather && weather.name), React.createElement(\"h3\", {\n    className: \"col-12 text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Temperature \", weather && weather.main.temp, \"\\xB0C\"), React.createElement(\"img\", {\n    src: \"http://openweathermap.org/img/w/\".concat(weather && weather.weather[0].icon, \".png\"),\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Weather description: \", weather && weather.weather[0].description))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/src/App.js"],"names":["React","useEffect","useState","PacmanLoader","App","weather","setWeather","isLoading","setLoading","getLocation","navigator","geolocation","getCurrentPosition","position","getData","coords","latitude","longitude","setTimeout","API_KEY","response","fetch","data","json","console","log","name","main","temp","icon","description"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,SAASC,GAAT,GAAe;AAAA,oBAEiBF,QAAQ,CAAC,IAAD,CAFzB;AAAA;AAAA,QAENG,OAFM;AAAA,QAEGC,UAFH;;AAAA,qBAGmBJ,QAAQ,CAAC,IAAD,CAH3B;AAAA;AAAA,QAGNK,SAHM;AAAA,QAGKC,UAHL;;AAIb,QAAMC,WAAW,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrDC,MAAAA,OAAO,CAACD,QAAQ,CAACE,MAAT,CAAgBC,QAAjB,EAA2BH,QAAQ,CAACE,MAAT,CAAgBE,SAA3C,CAAP;AACD,KAFD;AAGD,GAJD;;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,UAAU,CAACT,WAAD,EAAa,IAAb,CAAV;AAED,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMK,OAAO,GAAG,OAAOE,QAAP,EAAiBC,SAAjB,KAA+B;AAC7C,UAAME,OAAO,GAAG,kCAAhB;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,8DAAuDL,QAAvD,kBAAuEC,SAAvE,oBAA0FE,OAA1F,mBAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAhB,IAAAA,UAAU,CAACgB,IAAD,CAAV;AACAd,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAPD,CAfa,CAuBb;;;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYpB,OAAZ;AACA,SACEE,SAAS,GAEP,oBAAC,YAAD,CACE;AADF;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,IAAI,EAAE,GAHR;AAIE,IAAA,KAAK,EAAE,SAJT;AAKE,IAAA,OAAO,EAAEA,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFO,GAWN;AAAK,IAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,yCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAIE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBF,OAAO,IAAIA,OAAO,CAACqB,IAA3C,CAJF,EAKE;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgDrB,OAAO,IAAIA,OAAO,CAACsB,IAAR,CAAaC,IAAxE,UALF,EAME;AACE,IAAA,GAAG,4CAAqCvB,OAAO,IAC7CA,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmBwB,IADlB,SADL;AAGE,IAAA,GAAG,EAAC,EAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWE;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA6CxB,OAAO,IAAIA,OAAO,CAACA,OAAR,CAAgB,CAAhB,EAAmByB,WAA3E,CAXF,CADF,CADD,CAZL;AA8BD;;AAED,eAAe1B,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { PacmanLoader } from 'react-spinners';\n\nfunction App() {\n  \n  const [weather, setWeather] = useState(null)\n  const [isLoading, setLoading] = useState(true)\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      getData(position.coords.latitude, position.coords.longitude);\n    })\n  }\n\n  useEffect(() => {\n    setTimeout(getLocation,5000)\n    \n  }, [])\n\n  const getData = async (latitude, longitude) => {\n    const API_KEY = \"1f38c79d918a202fc06dbd3406c2ba09\";\n    const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`);\n    const data = await response.json();\n    console.log(data)\n    setWeather(data)\n    setLoading(false)\n  }\n  // getLocation()\n  console.log(weather)\n  return (\n    isLoading ? (\n\n      <PacmanLoader\n        // css={override}\n        sizeUnit={\"px\"}\n        size={150}\n        color={'#123abc'}\n        loading={isLoading}\n      />\n \n    ) :\n      (<div className=\"container-fluid text-white my-auto\">\n        <div className=\"container mx-auto my-4 py-4\">\n          <div className=\"row justify-content-center text-center\">\n            <h1 className=\"col-12 display-4 my-2 py-3 text-success\">\n              Awesome Weather App\n          </h1>\n            <h2 className=\"col-12\">{weather && weather.name}</h2>\n            <h3 className=\"col-12 text-danger\">Temperature {weather && weather.main.temp}Â°C</h3>\n            <img\n              src={`http://openweathermap.org/img/w/${weather &&\n                weather.weather[0].icon}.png`}\n              alt=''\n            />\n            <h3 className=\"col-12\">Weather description: {weather && weather.weather[0].description}</h3>\n          </div>\n        </div>\n      </div>)\n  );\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}