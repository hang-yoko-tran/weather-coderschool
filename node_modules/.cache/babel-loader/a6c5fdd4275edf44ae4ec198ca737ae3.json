{"ast":null,"code":"import _slicedToArray from \"/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        weather = _useState2[0],\n        setWeather = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      getData(position.coords.latitude, position.coords.longitude);\n    });\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  const getData = async (latitude, longitude) => {\n    const API_KEY = \"1f38c79d918a202fc06dbd3406c2ba09\";\n    const response = await fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(latitude, \"&lon=\").concat(longitude, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n    const data = await response.json();\n    console.log(data);\n    setWeather(data);\n  }; // getLocation()\n\n\n  console.log(weather);\n  return !true ? React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"TRUE\") : React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"FALSE\");\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Yoko/Desktop/YOKO/Web_full_stack/Weather_2019.10.16/Weather/src/App.js"],"names":["React","useEffect","useState","App","weather","setWeather","isLoading","setLoading","getLocation","navigator","geolocation","getCurrentPosition","position","getData","coords","latitude","longitude","API_KEY","response","fetch","data","json","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACiBD,QAAQ,EADzB;AAAA;AAAA,QACNE,OADM;AAAA,QACGC,UADH;;AAAA,qBAEmBH,QAAQ,CAAC,IAAD,CAF3B;AAAA;AAAA,QAENI,SAFM;AAAA,QAEKC,UAFL;;AAGb,QAAMC,WAAW,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrDC,MAAAA,OAAO,CAACD,QAAQ,CAACE,MAAT,CAAgBC,QAAjB,EAA2BH,QAAQ,CAACE,MAAT,CAAgBE,SAA3C,CAAP;AACD,KAFD;AAGD,GAJD;;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMK,OAAO,GAAG,OAAOE,QAAP,EAAiBC,SAAjB,KAA+B;AAC7C,UAAMC,OAAO,GAAG,kCAAhB;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,8DAAuDJ,QAAvD,kBAAuEC,SAAvE,oBAA0FC,OAA1F,mBAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAf,IAAAA,UAAU,CAACe,IAAD,CAAV;AACD,GAND,CAba,CAoBb;;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYnB,OAAZ;AACA,SACE,CAAC,IAAD,GAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAD1B;AAGD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [weather, setWeather] = useState()\n  const [isLoading, setLoading] = useState(true)\n  const getLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      getData(position.coords.latitude, position.coords.longitude);\n    })\n  }\n\n  useEffect(() => {\n    getLocation()\n  }, [])\n\n  const getData = async (latitude, longitude) => {\n    const API_KEY = \"1f38c79d918a202fc06dbd3406c2ba09\";\n    const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`);\n    const data = await response.json();\n    console.log(data)\n    setWeather(data)\n  }\n  // getLocation()\n  console.log(weather)\n  return (\n    !true ? <h1>TRUE</h1> : <h1>FALSE</h1>\n  );\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}